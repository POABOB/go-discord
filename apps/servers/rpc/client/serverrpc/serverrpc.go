// Code generated by goctl. DO NOT EDIT.
// Source: servers.proto

package serverrpc

import (
	"context"

	"github.com/POABOB/go-discord/apps/servers/rpc/pb/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Channel         = rpc.Channel
	DeleteMemberReq = rpc.DeleteMemberReq
	DeleteServerReq = rpc.DeleteServerReq
	Empty           = rpc.Empty
	GetServerReq    = rpc.GetServerReq
	GetServerRes    = rpc.GetServerRes
	GetServersReq   = rpc.GetServersReq
	GetServersRes   = rpc.GetServersRes
	InviteMemberReq = rpc.InviteMemberReq
	Member          = rpc.Member
	PatchMemberReq  = rpc.PatchMemberReq
	PatchServerReq  = rpc.PatchServerReq
	PostServerReq   = rpc.PostServerReq
	Relation        = rpc.Relation
	Server          = rpc.Server

	ServerRpc interface {
		GetServers(ctx context.Context, in *GetServersReq, opts ...grpc.CallOption) (*GetServersRes, error)
		GetUniqueServer(ctx context.Context, in *GetServerReq, opts ...grpc.CallOption) (*GetServerRes, error)
		PostServer(ctx context.Context, in *PostServerReq, opts ...grpc.CallOption) (*Empty, error)
		PatchServer(ctx context.Context, in *PatchServerReq, opts ...grpc.CallOption) (*Empty, error)
		DeleteServer(ctx context.Context, in *DeleteServerReq, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultServerRpc struct {
		cli zrpc.Client
	}
)

func NewServerRpc(cli zrpc.Client) ServerRpc {
	return &defaultServerRpc{
		cli: cli,
	}
}

func (m *defaultServerRpc) GetServers(ctx context.Context, in *GetServersReq, opts ...grpc.CallOption) (*GetServersRes, error) {
	client := rpc.NewServerRpcClient(m.cli.Conn())
	return client.GetServers(ctx, in, opts...)
}

func (m *defaultServerRpc) GetUniqueServer(ctx context.Context, in *GetServerReq, opts ...grpc.CallOption) (*GetServerRes, error) {
	client := rpc.NewServerRpcClient(m.cli.Conn())
	return client.GetUniqueServer(ctx, in, opts...)
}

func (m *defaultServerRpc) PostServer(ctx context.Context, in *PostServerReq, opts ...grpc.CallOption) (*Empty, error) {
	client := rpc.NewServerRpcClient(m.cli.Conn())
	return client.PostServer(ctx, in, opts...)
}

func (m *defaultServerRpc) PatchServer(ctx context.Context, in *PatchServerReq, opts ...grpc.CallOption) (*Empty, error) {
	client := rpc.NewServerRpcClient(m.cli.Conn())
	return client.PatchServer(ctx, in, opts...)
}

func (m *defaultServerRpc) DeleteServer(ctx context.Context, in *DeleteServerReq, opts ...grpc.CallOption) (*Empty, error) {
	client := rpc.NewServerRpcClient(m.cli.Conn())
	return client.DeleteServer(ctx, in, opts...)
}
