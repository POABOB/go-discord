// Code generated by goctl. DO NOT EDIT.
// Source: servers.proto

package server

import (
	"context"

	"github.com/POABOB/go-discord/apps/servers/rpc/internal/logic/serverrpc"
	"github.com/POABOB/go-discord/apps/servers/rpc/internal/svc"
	"github.com/POABOB/go-discord/apps/servers/rpc/pb/rpc"
)

type ServerRpcServer struct {
	svcCtx *svc.ServiceContext
	rpc.UnimplementedServerRpcServer
}

func NewServerRpcServer(svcCtx *svc.ServiceContext) *ServerRpcServer {
	return &ServerRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *ServerRpcServer) GetServers(ctx context.Context, in *rpc.GetServersReq) (*rpc.GetServersRes, error) {
	l := serverrpclogic.NewGetServersLogic(ctx, s.svcCtx)
	return l.GetServers(in)
}

func (s *ServerRpcServer) GetUniqueServer(ctx context.Context, in *rpc.GetServerReq) (*rpc.GetServerRes, error) {
	l := serverrpclogic.NewGetUniqueServerLogic(ctx, s.svcCtx)
	return l.GetUniqueServer(in)
}

func (s *ServerRpcServer) PostServer(ctx context.Context, in *rpc.PostServerReq) (*rpc.Empty, error) {
	l := serverrpclogic.NewPostServerLogic(ctx, s.svcCtx)
	return l.PostServer(in)
}

func (s *ServerRpcServer) PatchServer(ctx context.Context, in *rpc.PatchServerReq) (*rpc.Empty, error) {
	l := serverrpclogic.NewPatchServerLogic(ctx, s.svcCtx)
	return l.PatchServer(in)
}

func (s *ServerRpcServer) DeleteServer(ctx context.Context, in *rpc.DeleteServerReq) (*rpc.Empty, error) {
	l := serverrpclogic.NewDeleteServerLogic(ctx, s.svcCtx)
	return l.DeleteServer(in)
}
