// Code generated by goctl. DO NOT EDIT.
// Source: profile.proto

package rpc

import (
	"context"

	"github.com/POABOB/go-discord/apps/profile/rpc/pb/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteProfileReq            = rpc.DeleteProfileReq
	EmptyRes                    = rpc.EmptyRes
	GetUniqueProfileOrCreateReq = rpc.GetUniqueProfileOrCreateReq
	GetUniqueProfileOrCreateRes = rpc.GetUniqueProfileOrCreateRes
	PatchProfileReq             = rpc.PatchProfileReq

	Rpc interface {
		GetUniqueProfileOrCreate(ctx context.Context, in *GetUniqueProfileOrCreateReq, opts ...grpc.CallOption) (*GetUniqueProfileOrCreateRes, error)
		PatchProfile(ctx context.Context, in *PatchProfileReq, opts ...grpc.CallOption) (*EmptyRes, error)
		DeleteProfile(ctx context.Context, in *DeleteProfileReq, opts ...grpc.CallOption) (*EmptyRes, error)
	}

	defaultRpc struct {
		cli zrpc.Client
	}
)

func NewRpc(cli zrpc.Client) Rpc {
	return &defaultRpc{
		cli: cli,
	}
}

func (m *defaultRpc) GetUniqueProfileOrCreate(ctx context.Context, in *GetUniqueProfileOrCreateReq, opts ...grpc.CallOption) (*GetUniqueProfileOrCreateRes, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.GetUniqueProfileOrCreate(ctx, in, opts...)
}

func (m *defaultRpc) PatchProfile(ctx context.Context, in *PatchProfileReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.PatchProfile(ctx, in, opts...)
}

func (m *defaultRpc) DeleteProfile(ctx context.Context, in *DeleteProfileReq, opts ...grpc.CallOption) (*EmptyRes, error) {
	client := rpc.NewRpcClient(m.cli.Conn())
	return client.DeleteProfile(ctx, in, opts...)
}
