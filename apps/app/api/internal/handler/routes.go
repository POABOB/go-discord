// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	auth "github.com/POABOB/go-discord/apps/app/api/internal/handler/auth"
	member "github.com/POABOB/go-discord/apps/app/api/internal/handler/member"
	profile "github.com/POABOB/go-discord/apps/app/api/internal/handler/profile"
	servers "github.com/POABOB/go-discord/apps/app/api/internal/handler/servers"
	"github.com/POABOB/go-discord/apps/app/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: auth.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/profile",
				Handler: profile.GetUniqueProfileHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/profile",
				Handler: profile.PatchProfileHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/profile",
				Handler: profile.DeleteProfileHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/server",
				Handler: servers.GetServersHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/server/:serverId",
				Handler: servers.GetUniqueServerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/server",
				Handler: servers.PostServerHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/server",
				Handler: servers.PatchServerHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/server",
				Handler: servers.DeleteServerHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/member",
				Handler: member.InviteMemberHandler(serverCtx),
			},
			{
				Method:  http.MethodPatch,
				Path:    "/member",
				Handler: member.PatchMemberHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/member",
				Handler: member.DeleteMemberHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)
}
